{
	"info": {
		"_postman_id": "73e6adcb-f1f2-4dc0-9c3a-9046f4a945c1",
		"name": "DEUNA - API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11012521"
	},
	"item": [
		{
			"name": "auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Authorization token exist\", function () {\r",
							"    pm.expect(pm.response.json().authorizationToken).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Success message is correct\", function () {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"La autorización se ha concedido exitosamente.\");\r",
							"});\r",
							"\r",
							"//Storing variable to be reused in the next requests\r",
							"pm.collectionVariables.set(\"strAuthToken\", (pm.response.json().authorizationToken));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Create a random Client ID\r",
							"const cid = pm.variables.replaceIn(\"{{$randomBankAccount}}\");\r",
							"const sixCID = cid.slice(1,-1);\r",
							"\r",
							"//Create a random FirstName and LastName\r",
							"const flName = pm.variables.replaceIn(`{{$randomFirstName}} {{$randomLastName}}`);\r",
							"\r",
							"//Replace in Collection Variables\r",
							"pm.collectionVariables.set(\"strClientID\",sixCID);\r",
							"pm.collectionVariables.set(\"strName\",flName);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"clientID\": \"{{strClientID}}\",\n  \"name\": \"{{strName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": "{\n  \"authorizationToken\": \"DEUNAauth123456\",\n  \"message\": \"La autorización se ha concedido exitosamente.\"\n}"
				}
			]
		},
		{
			"name": "payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Success for payment\", function () {\r",
							"    pm.expect(pm.response.json().paymentStatus).to.be.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Payment method\", function () {\r",
							"    pm.expect(pm.response.json().paymentMethod).to.be.equal(\"Credit Card\");\r",
							"});\r",
							"\r",
							"//Storing variable to be reused in the next requests\r",
							"pm.collectionVariables.set(\"strTransactionID\", (pm.response.json().transactionID));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Get the Authorization Token\r",
							"const at = (pm.collectionVariables.get('strAuthToken'));\r",
							"\r",
							"//Create a random Payment Amount\r",
							"const paymAmo = pm.variables.replaceIn(\"{{$randomPrice}}\");\r",
							"\r",
							"//Replace in Collection Variables\r",
							"pm.collectionVariables.set(\"strPaymentAmount\",paymAmo);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"authorizationToken\": \"{{strAuthToken}}\",\n  \"paymentAmount\": \"{{strPaymentAmount}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/payment",
					"host": [
						"{{url}}"
					],
					"path": [
						"payment"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorizationToken\": \"{{}}\",\n  \"paymentAmount\": 100.00\n}"
						},
						"url": {
							"raw": "{{url}}/payment",
							"host": [
								"{{url}}"
							],
							"path": [
								"payment"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": "{\n  \"paymentStatus\": \"success\",\n  \"transactionID\": \"123456789\",\n  \"paymentDate\": \"2023-05-15\",\n  \"paymentMethod\": \"Credit Card\"\n}\n"
				}
			]
		},
		{
			"name": "payment/status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Success for payment\", function () {\r",
							"    pm.expect(pm.response.json().paymentStatus).to.be.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Payment method\", function () {\r",
							"    pm.expect(pm.response.json().transactionDetails.paymentMethod).to.be.equal(\"Credit Card\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"transactionID\": \"{{strTransactionID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/payment/status",
					"host": [
						"{{url}}"
					],
					"path": [
						"payment",
						"status"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionID\": \"123456789\"\n}"
						},
						"url": {
							"raw": "{{url}}/payment/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"payment",
								"status"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": "{\n  \"paymentStatus\": \"success\",\n  \"transactionDetails\": {\n    \"transactionID\": \"123456789\",\n    \"paymentDate\": \"2023-05-15\",\n    \"paymentMethod\": \"Credit Card\"\n  }\n}"
				}
			]
		},
		{
			"name": "orders/all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//To clear all variables in the entire collection after test execution\r",
							"\r",
							"//pm.collectionVariables.unset(\"strAuthToken\");\r",
							"//pm.collectionVariables.unset(\"strClientID\");\r",
							"//pm.collectionVariables.unset(\"strName\");\r",
							"//pm.collectionVariables.unset(\"strPaymentAmount\");\r",
							"//pm.collectionVariables.unset(\"strTransactionID\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body exist\", function () {\r",
							"    pm.expect(pm.response.body).to.exist;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/orders/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						"all"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"all"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": "{\n  \"totalOrders\": 15,\n  \"orders\": [\n    {\n      \"orderID\": \"1\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-15\",\n      \"orderAmount\": 100.00,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"2\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-16\",\n      \"orderAmount\": 75.50,\n      \"paymentMethod\": \"PayPal\"\n    },\n    {\n      \"orderID\": \"3\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-17\",\n      \"orderAmount\": 50.00,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"4\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-18\",\n      \"orderAmount\": 120.00,\n      \"paymentMethod\": \"Stripe\"\n    },\n    {\n      \"orderID\": \"5\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-19\",\n      \"orderAmount\": 95.75,\n      \"paymentMethod\": \"PayPal\"\n    },\n    {\n      \"orderID\": \"6\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-20\",\n      \"orderAmount\": 60.50,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"7\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-21\",\n      \"orderAmount\": 85.25,\n      \"paymentMethod\": \"Stripe\"\n    },\n    {\n      \"orderID\": \"8\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-22\",\n      \"orderAmount\": 110.00,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"9\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-23\",\n      \"orderAmount\": 70.75,\n      \"paymentMethod\": \"PayPal\"\n    },\n    {\n      \"orderID\": \"10\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-24\",\n      \"orderAmount\": 40.50,\n      \"paymentMethod\": \"Stripe\"\n    },\n    {\n      \"orderID\": \"11\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-25\",\n      \"orderAmount\": 125.00,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"12\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-26\",\n      \"orderAmount\": 90.25,\n      \"paymentMethod\": \"PayPal\"\n    },\n    {\n      \"orderID\": \"13\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-27\",\n      \"orderAmount\": 55.50,\n      \"paymentMethod\": \"Stripe\"\n    },\n    {\n      \"orderID\": \"14\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-28\",\n      \"orderAmount\": 80.75,\n      \"paymentMethod\": \"Credit Card\"\n    },\n    {\n      \"orderID\": \"15\",\n      \"orderStatus\": \"success\",\n      \"orderDate\": \"2023-05-29\",\n      \"orderAmount\": 105.00,\n      \"paymentMethod\": \"PayPal\"\n    }\n  ]\n}\n"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://d0e5f6a4-c27a-4223-8353-3c80efadb178.mock.pstmn.io"
		},
		{
			"key": "strAuthToken",
			"value": ""
		},
		{
			"key": "strClientID",
			"value": ""
		},
		{
			"key": "strName",
			"value": ""
		},
		{
			"key": "strPaymentAmount",
			"value": ""
		},
		{
			"key": "strTransactionID",
			"value": ""
		}
	]
}